import Head from "next/head";
import Image from "next/image";
import { Inter } from "next/font/google";
import { useEffect, useState } from "react";
import * as process from "process";
import { stdout } from "process";
import { getEndpointUrl } from "@/utils/api-utils";

const inter = Inter({ subsets: ["latin"] });

async function fetchCurrentTemperature() {
  console.log(window.location.hostname);
  const res = await fetch(getEndpointUrl("/api/v1/measurements/current"));
  if (res.ok) {
    const measurement = await res.json();
    return {
      temperature: measurement.value,
      timestamp: new Date(Date.parse(measurement.timestamp)),
    };
  }
  return undefined;
}
function calculateMinutesAgo(otherDate: Date): number {
  const currentDate: Date = new Date();
  const difference = currentDate.getTime() - otherDate.getTime();
  return Math.floor(difference / 1000 / 60);
}

export default function Home({ test }: { test: string }) {
  const [isLoading, setIsLoading] = useState(true);
  const [displayCurrentTemperature, setDisplayCurrentTemperature] =
    useState(false);
  const [currentTemperature, setCurrentTemperature] = useState<{
    temperature?: number;
    timestamp?: Date;
    minutesAgo: number;
  }>({
    minutesAgo: 0,
  });
  useEffect(() => {
    (async () => {
      const currentTemperature = await fetchCurrentTemperature();
      if (currentTemperature) {
        setIsLoading(false);
        setDisplayCurrentTemperature(true);
        setCurrentTemperature({
          ...currentTemperature,
          minutesAgo: calculateMinutesAgo(currentTemperature.timestamp),
        });
        return;
      }
      setIsLoading(false);
      setDisplayCurrentTemperature(false);
    })();
  }, []);
  return (
    <>
      <Head>
        <title>PoolTemp</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="container m-8">
        {isLoading && <p>Loading</p>}
        {!isLoading && !displayCurrentTemperature && <p>No data found</p>}
        {displayCurrentTemperature && (
          <>
            <p className="text-2xl">
              Current temperature: {currentTemperature.temperature}Â°C
            </p>
            <p>
              Measurement taken:{" "}
              {currentTemperature.timestamp?.toLocaleString()}
            </p>
            {currentTemperature.minutesAgo < 60 &&
              currentTemperature.minutesAgo > 0 && (
                <p>{currentTemperature.minutesAgo} minutes ago</p>
              )}
            {currentTemperature.minutesAgo === 0 && <p>Just now</p>}
          </>
        )}
      </div>
    </>
  );
}
